"""
Launch script for National Park Sentiment Analysis Dashboard

This script provides a convenient way to start the Streamlit application
and handles any necessary setup before launch.
"""

import os
import subprocess
import sys
import time
import webbrowser
from pathlib import Path

# Mapping of import names to package names
PACKAGE_MAP = {
    'bs4': 'beautifulsoup4',
    'sklearn': 'scikit-learn',
    'torch': 'torch',
    'nltk': 'nltk',
    'transformers': 'transformers',
    'tqdm': 'tqdm',
    'plotly': 'plotly',
    'matplotlib': 'matplotlib',
    'seaborn': 'seaborn',
    'pandas': 'pandas',
    'numpy': 'numpy',
    'streamlit': 'streamlit',
    'wordcloud': 'wordcloud',
    'requests': 'requests',
    'lxml': 'lxml'
}

def check_dependencies():
    """Check if all required packages are installed."""
    missing = []
    for package in PACKAGE_MAP.keys():
        try:
            __import__(package)
        except ImportError:
            missing.append(PACKAGE_MAP[package])
    
    if not missing:
        print("‚úÖ All dependencies are installed.")
        return True
    
    print("‚ùå Missing dependencies:")
    print("\n".join(f"- {pkg}" for pkg in missing))
    print("\nPlease install missing packages using:")
    print(f"pip install {' '.join(missing)}")
    return False

def download_nltk_resources():
    """Download required NLTK resources if not already present."""
    try:
        import nltk
        resources = {
            'stopwords': 'corpora/stopwords',
            'punkt': 'tokenizers/punkt'
        }
        
        for resource, path in resources.items():
            try:
                nltk.data.find(path)
                print(f"‚úÖ NLTK resource '{resource}' is already downloaded.")
            except LookupError:
                print(f"üì• Downloading NLTK resource: {resource}")
                nltk.download(resource, quiet=True)
                # Verify download
                nltk.data.find(path)
                print(f"‚úÖ Successfully downloaded '{resource}'")
                
    except Exception as e:
        print(f"‚ö†Ô∏è Error downloading NLTK resources: {str(e)}")
        print("Some features may not work properly.")

def setup_environment():
    """Set up environment variables and directories."""
    # Create cache directory for transformers
    cache_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), ".cache")
    os.makedirs(cache_dir, exist_ok=True)
    os.environ["TRANSFORMERS_CACHE"] = cache_dir
    
    # Configure matplotlib backend
    os.environ["MPLBACKEND"] = "Agg"
    
    # Set NLTK data path
    nltk_data = os.path.join(os.path.expanduser("~"), "nltk_data")
    os.makedirs(nltk_data, exist_ok=True)
    os.environ["NLTK_DATA"] = nltk_data
    
    print("‚úÖ Environment configured with cache and data directories.")

def launch_streamlit():
    """Launch the Streamlit application."""
    app_files = [
        Path(__file__).parent / "app.py",
        Path(__file__).parent / "streamlit-national-park-sentiment.py"
    ]
    
    app_path = None
    for path in app_files:
        if path.exists():
            app_path = path
            break
    
    if not app_path:
        print("‚ùå Could not find Streamlit application file.")
        print("Please ensure one of these files exists:")
        print("\n".join(f"- {p.name}" for p in app_files))
        return False

    print(f"üöÄ Launching Streamlit app: {app_path.name}")
    
    try:
        # Configure browser opening
        def open_browser():
            time.sleep(3)  # Wait for server to start
            webbrowser.open("http://localhost:8501")
        
        import threading
        browser_thread = threading.Thread(target=open_browser)
        browser_thread.daemon = True
        browser_thread.start()
        
        # Run Streamlit command
        cmd = [
            sys.executable,
            "-m", "streamlit",
            "run", str(app_path),
            "--server.port", "8501",
            "--server.headless", "false",
            "--browser.serverAddress", "localhost"
        ]
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # Print Streamlit output in real-time
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
        
        return process.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Error launching Streamlit: {str(e)}")
        return False

def main():
    """Main execution flow."""
    print("=" * 80)
    print("National Park Sentiment Analysis Dashboard - Setup")
    print("=" * 80)
    
    if not check_dependencies():
        return 1
    
    download_nltk_resources()
    setup_environment()
    
    print("\n" + "=" * 80)
    print("Starting Dashboard...")
    print("=" * 80 + "\n")
    
    if not launch_streamlit():
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
