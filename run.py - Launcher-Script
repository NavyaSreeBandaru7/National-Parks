"""
Launch script for National Park Sentiment Analysis Dashboard

Updated to match actual dependencies from the analysis code
"""

import os
import subprocess
import sys
import time
import webbrowser
from pathlib import Path

# Mapping of import names to package names (updated to match actual dependencies)
PACKAGE_MAP = {
    'bs4': 'beautifulsoup4',
    'spacy': 'spacy',
    'torch': 'torch',
    'transformers': 'transformers',
    'matplotlib': 'matplotlib',
    'pandas': 'pandas',
    'numpy': 'numpy',
    'streamlit': 'streamlit',
    'wordcloud': 'wordcloud',
    'requests': 'requests',
    'tqdm': 'tqdm'
}

def check_dependencies():
    """Check if all required packages are installed."""
    missing = []
    for package in PACKAGE_MAP.keys():
        try:
            __import__(package)
        except ImportError:
            missing.append(PACKAGE_MAP[package])
    
    if not missing:
        print("‚úÖ All dependencies are installed.")
        return True
    
    print("‚ùå Missing dependencies:")
    print("\n".join(f"- {pkg}" for pkg in missing))
    print("\nPlease install missing packages using:")
    print(f"pip install {' '.join(missing)}")
    return False

def download_spacy_model():
    """Download required spaCy model if not present"""
    try:
        import spacy
        print("üîç Checking for spaCy model...")
        try:
            spacy.load("en_core_web_sm")
            print("‚úÖ spaCy model 'en_core_web_sm' already installed")
        except OSError:
            print("üì• Downloading spaCy model: en_core_web_sm")
            subprocess.run([sys.executable, "-m", "spacy", "download", "en_core_web_sm"], check=True)
            print("‚úÖ Successfully downloaded spaCy model")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error with spaCy model: {str(e)}")
        print("Some NLP features may not work properly.")

def setup_environment():
    """Set up environment variables and directories."""
    # Create cache directory for transformers
    cache_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), ".cache")
    os.makedirs(cache_dir, exist_ok=True)
    os.environ["TRANSFORMERS_CACHE"] = cache_dir
    
    # Configure matplotlib backend
    os.environ["MPLBACKEND"] = "Agg"
    
    print("‚úÖ Environment configured with cache directories.")

def launch_streamlit():
    """Launch the Streamlit application."""
    app_path = Path(__file__).parent / "app.py"
    
    if not app_path.exists():
        print("‚ùå Could not find Streamlit application file (app.py)")
        return False

    print(f"üöÄ Launching Streamlit app: {app_path.name}")
    
    try:
        # Configure browser opening
        def open_browser():
            time.sleep(3)  # Wait for server to start
            webbrowser.open("http://localhost:8501")
        
        import threading
        browser_thread = threading.Thread(target=open_browser)
        browser_thread.daemon = True
        browser_thread.start()
        
        # Run Streamlit command
        cmd = [
            sys.executable,
            "-m", "streamlit",
            "run", str(app_path),
            "--server.port", "8501",
            "--server.headless", "false",
            "--browser.serverAddress", "localhost"
        ]
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # Print Streamlit output in real-time
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
        
        return process.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Error launching Streamlit: {str(e)}")
        return False

def main():
    """Main execution flow."""
    print("=" * 80)
    print("National Park Sentiment Analysis Dashboard - Setup")
    print("=" * 80)
    
    if not check_dependencies():
        return 1
    
    download_spacy_model()
    setup_environment()
    
    print("\n" + "=" * 80)
    print("Starting Dashboard...")
    print("=" * 80 + "\n")
    
    if not launch_streamlit():
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
